import { ref, computed } from 'vue';
import type { RouteRecordRaw } from 'vue-router';
import { defineStore } from 'pinia';
import { useBoolean } from '@sa/hooks';
import type { ElegantConstRoute, CustomRoute, RouteKey, LastLevelRouteKey, RouteMap } from '@elegant-router/types';
import { SetupStoreId } from '@/enum';
import { router } from '@/router';
import { createRoutes, getAuthVueRoutes, ROOT_ROUTE } from '@/router/routes';
import { getRoutePath, getRouteName } from '@/router/elegant/transform';
import { fetchGetUserRoutes, fetchIsRouteExist } from '@/service/api';
import {
  filterAuthRoutesByRoles,
  getGlobalMenusByAuthRoutes,
  updateLocaleOfGlobalMenus,
  getCacheRouteNames,
  isRouteExistByRouteName,
  getSelectedMenuKeyPathByKey,
  getBreadcrumbsByRoute
} from './shared';
import { useAppStore } from '../app';
import { useAuthStore } from '../auth';
import { useTabStore } from '../tab';

export const useRouteStore = defineStore(SetupStoreId.Route, () => {
  const appStore = useAppStore();
  const authStore = useAuthStore();
  const tabStore = useTabStore();
  const { bool: isInitAuthRoute, setBool: setIsInitAuthRoute } = useBoolean();
  const removeRouteFns: (() => void)[] = [];

  /**
   * auth route mode
   * @description it recommends to use static mode in the development environment, and use dynamic mode in the production environment,
   * if use static mode in development environment, the auth routes will be auto generated by plugin "@elegant-router/vue"
   */
  const authRouteMode = ref(import.meta.env.VITE_AUTH_ROUTE_MODE);

  /**
   * home route key
   */
  const routeHome = ref(import.meta.env.VITE_ROUTE_HOME);

  /**
   * set route home
   * @param routeKey route key
   */
  function setRouteHome(routeKey: LastLevelRouteKey) {
    routeHome.value = routeKey;
  }

  /**
   * global menus
   */
  const menus = ref<App.Global.Menu[]>([]);

  /**
   * get global menus
   */
  function getGlobalMenus(routes: ElegantConstRoute[]) {
    menus.value = getGlobalMenusByAuthRoutes(routes);
  }

  /**
   * update global menus by locale
   */
  function updateGlobalMenusByLocale() {
    menus.value = updateLocaleOfGlobalMenus(menus.value);
  }

  /**
   * cache routes
   */
  const cacheRoutes = ref<RouteKey[]>([]);

  /**
   * get cache routes
   * @param routes vue routes
   */
  function getCacheRoutes(routes: RouteRecordRaw[]) {
    const { constantVueRoutes } = createRoutes();

    cacheRoutes.value = getCacheRouteNames([...constantVueRoutes, ...routes]);
  }

  /**
   * add cache routes
   * @param routeKey
   */
  function addCacheRoutes(routeKey: RouteKey) {
    if (cacheRoutes.value.includes(routeKey)) return;

    cacheRoutes.value.push(routeKey);
  }

  /**
   * remove cache routes
   * @param routeKey
   */
  function removeCacheRoutes(routeKey: RouteKey) {
    const index = cacheRoutes.value.findIndex(item => item === routeKey);

    if (index === -1) return;

    cacheRoutes.value.splice(index, 1);
  }

  /**
   * re-cache routes by route key
   * @param routeKey
   */
  async function reCacheRoutesByKey(routeKey: RouteKey) {
    removeCacheRoutes(routeKey);

    await appStore.reloadPage();

    addCacheRoutes(routeKey);
  }

  /**
   * re-cache routes by route keys
   * @param routeKeys
   */
  async function reCacheRoutesByKeys(routeKeys: RouteKey[]) {
    for await (const key of routeKeys) {
      await reCacheRoutesByKey(key);
    }
  }

  /**
   * global breadcrumbs
   */
  const breadcrumbs = computed(() => getBreadcrumbsByRoute(router.currentRoute.value, menus.value));

  /**
   * reset store
   */
  async function resetStore() {
    const routeStore = useRouteStore();

    routeStore.$reset();

    resetVueRoutes();
  }

  /**
   * reset vue routes
   */
  function resetVueRoutes() {
    removeRouteFns.forEach(fn => fn());
    removeRouteFns.length = 0;
  }

  /**
   * init auth route
   */
  async function initAuthRoute() {
    if (authRouteMode.value === 'static') {
      await initStaticAuthRoute();
    } else {
      await initDynamicAuthRoute();
    }

    tabStore.initHomeTab(router);
  }

  /**
   * init static auth route
   */
  async function initStaticAuthRoute() {
    const { authRoutes } = createRoutes();

    const filteredAuthRoutes = filterAuthRoutesByRoles(authRoutes, authStore.userInfo.roles);

    handleAuthRoutes(filteredAuthRoutes);

    setIsInitAuthRoute(true);
  }

  /**
   * init dynamic auth route
   */
  async function initDynamicAuthRoute() {
    const {
      data: { routes, home }
    } = await fetchGetUserRoutes();

    handleAuthRoutes(routes);

    setRouteHome(home);

    handleUpdateRootRouteRedirect(home);

    setIsInitAuthRoute(true);
  }

  /**
   * handle routes
   * @param routes auth routes
   */
  function handleAuthRoutes(routes: ElegantConstRoute[]) {
    const vueRoutes = getAuthVueRoutes(routes);

    addRoutesToVueRouter(vueRoutes);

    getGlobalMenus(routes);

    getCacheRoutes(vueRoutes);
  }

  /**
   * add routes to vue router
   * @param routes vue routes
   */
  function addRoutesToVueRouter(routes: RouteRecordRaw[]) {
    routes.forEach(route => {
      const removeFn = router.addRoute(route);
      addRemoveRouteFn(removeFn);
    });
  }

  /**
   * add remove route fn
   * @param fn
   */
  function addRemoveRouteFn(fn: () => void) {
    removeRouteFns.push(fn);
  }

  /**
   * update root route redirect when auth route mode is dynamic
   * @param redirectKey redirect route key
   */
  function handleUpdateRootRouteRedirect(redirectKey: LastLevelRouteKey) {
    const redirect = getRoutePath(redirectKey);

    if (redirect) {
      const rootRoute: CustomRoute = { ...ROOT_ROUTE, redirect };

      router.removeRoute(rootRoute.name);

      const [rootVueRoute] = getAuthVueRoutes([rootRoute]);

      router.addRoute(rootVueRoute);
    }
  }

  /**
   * get is auth route exist
   * @param routePath route path
   */
  async function getIsAuthRouteExist(routePath: RouteMap[RouteKey]) {
    const routeName = getRouteName(routePath);

    if (!routeName) {
      return false;
    }

    if (authRouteMode.value === 'static') {
      const { authRoutes } = createRoutes();

      return isRouteExistByRouteName(routeName, authRoutes);
    }

    const { data } = await fetchIsRouteExist(routeName);

    return data;
  }

  /**
   * get selected menu key path
   * @param selectedKey selected menu key
   */
  function getSelectedMenuKeyPath(selectedKey: string) {
    return getSelectedMenuKeyPathByKey(selectedKey, menus.value);
  }

  return {
    resetStore,
    routeHome,
    menus,
    updateGlobalMenusByLocale,
    cacheRoutes,
    reCacheRoutesByKey,
    reCacheRoutesByKeys,
    breadcrumbs,
    initAuthRoute,
    isInitAuthRoute,
    setIsInitAuthRoute,
    getIsAuthRouteExist,
    getSelectedMenuKeyPath
  };
});
